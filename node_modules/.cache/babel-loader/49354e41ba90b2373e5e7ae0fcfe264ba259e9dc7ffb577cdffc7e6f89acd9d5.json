{"ast":null,"code":"import{useState,useEffect,useMemo}from'react';export const useSearch=function(vocabulary){let debounceMs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:300;const[searchTerm,setSearchTerm]=useState('');const[debouncedSearchTerm,setDebouncedSearchTerm]=useState('');// Debounce der Sucheingabe\nuseEffect(()=>{const timer=setTimeout(()=>{setDebouncedSearchTerm(searchTerm);},debounceMs);return()=>clearTimeout(timer);},[searchTerm,debounceMs]);// Gefilterte Ergebnisse\nconst searchResults=useMemo(()=>{if(!debouncedSearchTerm.trim()){return vocabulary;// Alle Vokabeln anzeigen wenn keine Suche\n}const term=debouncedSearchTerm.toLowerCase().trim();return vocabulary.filter(card=>{// Suche in allen Feldern\nconst searchFields=[card.it,card.de,...(card.tags||[]),card.notes||''];return searchFields.some(field=>field.toLowerCase().includes(term));});},[vocabulary,debouncedSearchTerm]);// Highlight-Funktion für Suchergebnisse\nconst highlightMatch=(text,searchTerm)=>{if(!searchTerm.trim())return text;const regex=new RegExp(\"(\".concat(searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&'),\")\"),'gi');return text.replace(regex,'<mark class=\"bg-yellow-200\">$1</mark>');};return{searchTerm,setSearchTerm,searchResults,highlightMatch,isSearching:debouncedSearchTerm!==searchTerm,// Zeigt Loading-State\nhasResults:searchResults.length>0,resultCount:searchResults.length};};","map":{"version":3,"names":["useState","useEffect","useMemo","useSearch","vocabulary","debounceMs","arguments","length","undefined","searchTerm","setSearchTerm","debouncedSearchTerm","setDebouncedSearchTerm","timer","setTimeout","clearTimeout","searchResults","trim","term","toLowerCase","filter","card","searchFields","it","de","tags","notes","some","field","includes","highlightMatch","text","regex","RegExp","concat","replace","isSearching","hasResults","resultCount"],"sources":["/home/alex/italvoc/src/hooks/useSearch.ts"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { VocabularyCard } from '../types/vocabulary';\n\nexport const useSearch = (vocabulary: VocabularyCard[], debounceMs: number = 300) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');\n\n  // Debounce der Sucheingabe\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedSearchTerm(searchTerm);\n    }, debounceMs);\n\n    return () => clearTimeout(timer);\n  }, [searchTerm, debounceMs]);\n\n  // Gefilterte Ergebnisse\n  const searchResults = useMemo(() => {\n    if (!debouncedSearchTerm.trim()) {\n      return vocabulary; // Alle Vokabeln anzeigen wenn keine Suche\n    }\n\n    const term = debouncedSearchTerm.toLowerCase().trim();\n    \n    return vocabulary.filter(card => {\n      // Suche in allen Feldern\n      const searchFields = [\n        card.it,\n        card.de,\n        ...(card.tags || []),\n        card.notes || ''\n      ];\n      \n      return searchFields.some(field => \n        field.toLowerCase().includes(term)\n      );\n    });\n  }, [vocabulary, debouncedSearchTerm]);\n\n  // Highlight-Funktion für Suchergebnisse\n  const highlightMatch = (text: string, searchTerm: string): string => {\n    if (!searchTerm.trim()) return text;\n    \n    const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n    return text.replace(regex, '<mark class=\"bg-yellow-200\">$1</mark>');\n  };\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    searchResults,\n    highlightMatch,\n    isSearching: debouncedSearchTerm !== searchTerm, // Zeigt Loading-State\n    hasResults: searchResults.length > 0,\n    resultCount: searchResults.length\n  };\n}; "],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,OAAO,KAAQ,OAAO,CAGpD,MAAO,MAAM,CAAAC,SAAS,CAAG,QAAAA,CAACC,UAA4B,CAA+B,IAA7B,CAAAC,UAAkB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CAC9E,KAAM,CAACG,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACW,mBAAmB,CAAEC,sBAAsB,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAElE;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAY,KAAK,CAAGC,UAAU,CAAC,IAAM,CAC7BF,sBAAsB,CAACH,UAAU,CAAC,CACpC,CAAC,CAAEJ,UAAU,CAAC,CAEd,MAAO,IAAMU,YAAY,CAACF,KAAK,CAAC,CAClC,CAAC,CAAE,CAACJ,UAAU,CAAEJ,UAAU,CAAC,CAAC,CAE5B;AACA,KAAM,CAAAW,aAAa,CAAGd,OAAO,CAAC,IAAM,CAClC,GAAI,CAACS,mBAAmB,CAACM,IAAI,CAAC,CAAC,CAAE,CAC/B,MAAO,CAAAb,UAAU,CAAE;AACrB,CAEA,KAAM,CAAAc,IAAI,CAAGP,mBAAmB,CAACQ,WAAW,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAErD,MAAO,CAAAb,UAAU,CAACgB,MAAM,CAACC,IAAI,EAAI,CAC/B;AACA,KAAM,CAAAC,YAAY,CAAG,CACnBD,IAAI,CAACE,EAAE,CACPF,IAAI,CAACG,EAAE,CACP,IAAIH,IAAI,CAACI,IAAI,EAAI,EAAE,CAAC,CACpBJ,IAAI,CAACK,KAAK,EAAI,EAAE,CACjB,CAED,MAAO,CAAAJ,YAAY,CAACK,IAAI,CAACC,KAAK,EAC5BA,KAAK,CAACT,WAAW,CAAC,CAAC,CAACU,QAAQ,CAACX,IAAI,CACnC,CAAC,CACH,CAAC,CAAC,CACJ,CAAC,CAAE,CAACd,UAAU,CAAEO,mBAAmB,CAAC,CAAC,CAErC;AACA,KAAM,CAAAmB,cAAc,CAAGA,CAACC,IAAY,CAAEtB,UAAkB,GAAa,CACnE,GAAI,CAACA,UAAU,CAACQ,IAAI,CAAC,CAAC,CAAE,MAAO,CAAAc,IAAI,CAEnC,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,MAAM,KAAAC,MAAA,CAAKzB,UAAU,CAAC0B,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,MAAK,IAAI,CAAC,CACxF,MAAO,CAAAJ,IAAI,CAACI,OAAO,CAACH,KAAK,CAAE,uCAAuC,CAAC,CACrE,CAAC,CAED,MAAO,CACLvB,UAAU,CACVC,aAAa,CACbM,aAAa,CACbc,cAAc,CACdM,WAAW,CAAEzB,mBAAmB,GAAKF,UAAU,CAAE;AACjD4B,UAAU,CAAErB,aAAa,CAACT,MAAM,CAAG,CAAC,CACpC+B,WAAW,CAAEtB,aAAa,CAACT,MAC7B,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}