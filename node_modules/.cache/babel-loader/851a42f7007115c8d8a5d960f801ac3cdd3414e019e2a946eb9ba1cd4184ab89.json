{"ast":null,"code":"import _objectSpread from\"/home/alex/italvoc/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';import{saveVocabulary,loadVocabulary,backupToLocalStorage,loadFromLocalStorage,initDB}from'../utils/storage';const STORAGE_KEY='italvoc-vocabulary';export const useVocabularyManager=()=>{const[vocabulary,setVocabulary]=useState([]);const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);// Vokabeln laden\nconst loadVocabularyData=async()=>{setIsLoading(true);setError(null);try{// Versuche zuerst IndexedDB\nconst data=await loadVocabulary();if(data&&data.length>0){setVocabulary(data);// Backup in LocalStorage aktualisieren\nbackupToLocalStorage(data);return;}// Wenn IndexedDB leer, versuche LocalStorage\nconst backupData=loadFromLocalStorage();if(backupData&&backupData.length>0){setVocabulary(backupData);// Wiederherstellen in IndexedDB\nawait saveVocabulary(backupData);return;}// Wenn beide leer, lade aus JSON\nconsole.log('📥 Versuche Vokabeln aus JSON zu laden...');const response=await fetch('/ital-deutsch-vocabulary.json');if(!response.ok){console.error('❌ JSON-Ladefehler:',response.status,response.statusText);throw new Error('Fehler beim Laden der Vokabeln');}const jsonData=await response.json();console.log('📦 JSON-Daten geladen:',jsonData.meta);if(!jsonData.cards||!Array.isArray(jsonData.cards)){console.error('❌ Ungültiges JSON-Format:',jsonData);throw new Error('Ungültiges JSON-Format');}console.log(\"\\u2705 \".concat(jsonData.cards.length,\" Vokabeln aus JSON geladen\"));// Die Karten sind bereits im richtigen Format\nconst formattedData=jsonData.cards;console.log('📝 Daten formatiert:',formattedData.length,'Vokabeln');setVocabulary(formattedData);// Speichere in IndexedDB und LocalStorage\nconsole.log('💾 Speichere in IndexedDB...');await saveVocabulary(formattedData);console.log('💾 Backup in LocalStorage...');backupToLocalStorage(formattedData);}catch(err){console.error('Fehler beim Laden der Vokabeln:',err);setError(err instanceof Error?err.message:'Unbekannter Fehler');}finally{setIsLoading(false);}};// Vokabeln speichern\nconst saveVocabularyData=async data=>{try{await saveVocabulary(data);backupToLocalStorage(data);setVocabulary(data);}catch(err){console.error('Fehler beim Speichern der Vokabeln:',err);setError(err instanceof Error?err.message:'Unbekannter Fehler');}};// Vokabeln neu laden\nconst reloadVocabulary=async()=>{try{// Lösche IndexedDB und LocalStorage\nconst db=await initDB();const transaction=db.transaction(['vocabulary'],'readwrite');const store=transaction.objectStore('vocabulary');await store.clear();localStorage.removeItem('italvoc-backup');// Lade neu\nawait loadVocabularyData();}catch(err){console.error('Fehler beim Neuladen der Vokabeln:',err);setError(err instanceof Error?err.message:'Unbekannter Fehler');}};// Initial laden\nuseEffect(()=>{loadVocabularyData();},[]);// Speichern in IndexedDB und LocalStorage\nconst saveToStorage=useCallback(async vocabs=>{try{await saveVocabulary(vocabs);backupToLocalStorage(vocabs);console.log(\"\\uD83D\\uDCBE \".concat(vocabs.length,\" Vokabeln gespeichert\"));}catch(err){console.error('Fehler beim Speichern:',err);}},[]);// Mehrere neue Vokabeln als Batch hinzufügen\nconst addVocabularies=useCallback(newVocabs=>{const now=Date.now();const batch=newVocabs.map((v,i)=>_objectSpread(_objectSpread({},v),{},{id:\"custom-\".concat(now+i,\"-\").concat(Math.random().toString(36).substr(2,9)),sm2:{easeFactor:2.5,interval:1,repetitions:0,nextReview:null,lastReview:null,quality:null}}));const updatedVocabs=[...vocabulary,...batch];setVocabulary(updatedVocabs);saveToStorage(updatedVocabs);console.log(\"\\u2795 Batch: \".concat(batch.length,\" neue Vokabeln hinzugef\\xFCgt.\"));return batch;},[vocabulary,saveToStorage]);// Neue Vokabel hinzufügen\nconst addVocabulary=useCallback(newVocab=>{const id=\"custom-\".concat(Date.now(),\"-\").concat(Math.random().toString(36).substr(2,9));const vocabWithDefaults=_objectSpread(_objectSpread({},newVocab),{},{id,sm2:{easeFactor:2.5,interval:1,repetitions:0,nextReview:null,lastReview:null,quality:null}});const updatedVocabs=[...vocabulary,vocabWithDefaults];setVocabulary(updatedVocabs);saveToStorage(updatedVocabs);console.log('➕ Neue Vokabel hinzugefügt:',vocabWithDefaults);return vocabWithDefaults;},[vocabulary,saveToStorage]);// Vokabel bearbeiten\nconst updateVocabulary=useCallback((id,updates)=>{const updatedVocabs=vocabulary.map(vocab=>vocab.id===id?_objectSpread(_objectSpread({},vocab),updates):vocab);setVocabulary(updatedVocabs);saveToStorage(updatedVocabs);console.log('✏️ Vokabel bearbeitet:',id,updates);return updatedVocabs.find(v=>v.id===id);},[vocabulary,saveToStorage]);// Vokabel löschen\nconst deleteVocabulary=useCallback(id=>{const updatedVocabs=vocabulary.filter(vocab=>vocab.id!==id);setVocabulary(updatedVocabs);saveToStorage(updatedVocabs);console.log('🗑️ Vokabel gelöscht:',id);return true;},[vocabulary,saveToStorage]);// SM-2 Daten aktualisieren\nconst updateSM2Data=useCallback((id,sm2Data)=>{const vocab=vocabulary.find(v=>v.id===id);if(!vocab){console.error('Vokabel nicht gefunden:',id);return null;}return updateVocabulary(id,{sm2:_objectSpread(_objectSpread({},vocab.sm2),sm2Data)});},[vocabulary,updateVocabulary]);// Vokabel nach ID finden\nconst getVocabularyById=useCallback(id=>{return vocabulary.find(vocab=>vocab.id===id);},[vocabulary]);// Duplikat-Prüfung\nconst checkDuplicate=useCallback((it,de,excludeId)=>{return vocabulary.some(vocab=>vocab.id!==excludeId&&(vocab.it===it||vocab.de===de));},[vocabulary]);// Statistiken\nconst getStats=useCallback(()=>{const learned=vocabulary.filter(v=>v.sm2.repetitions>0).length;const toReview=vocabulary.filter(v=>{if(!v.sm2.nextReview)return false;return new Date(v.sm2.nextReview)<=new Date();}).length;return{total:vocabulary.length,learned,toReview,available:vocabulary.length-learned};},[vocabulary]);return{vocabulary,isLoading,error,addVocabulary,addVocabularies,updateVocabulary,deleteVocabulary,updateSM2Data,getVocabularyById,checkDuplicate,getStats,reloadVocabulary,saveVocabulary:saveVocabularyData};};","map":{"version":3,"names":["useState","useEffect","useCallback","saveVocabulary","loadVocabulary","backupToLocalStorage","loadFromLocalStorage","initDB","STORAGE_KEY","useVocabularyManager","vocabulary","setVocabulary","isLoading","setIsLoading","error","setError","loadVocabularyData","data","length","backupData","console","log","response","fetch","ok","status","statusText","Error","jsonData","json","meta","cards","Array","isArray","concat","formattedData","err","message","saveVocabularyData","reloadVocabulary","db","transaction","store","objectStore","clear","localStorage","removeItem","saveToStorage","vocabs","addVocabularies","newVocabs","now","Date","batch","map","v","i","_objectSpread","id","Math","random","toString","substr","sm2","easeFactor","interval","repetitions","nextReview","lastReview","quality","updatedVocabs","addVocabulary","newVocab","vocabWithDefaults","updateVocabulary","updates","vocab","find","deleteVocabulary","filter","updateSM2Data","sm2Data","getVocabularyById","checkDuplicate","it","de","excludeId","some","getStats","learned","toReview","total","available"],"sources":["/home/alex/italvoc/src/hooks/useVocabularyManager.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { VocabularyData, VocabularyCard } from '../types/vocabulary';\nimport { saveVocabulary, loadVocabulary, backupToLocalStorage, loadFromLocalStorage, initDB } from '../utils/storage';\n\nconst STORAGE_KEY = 'italvoc-vocabulary';\n\nexport const useVocabularyManager = () => {\n  const [vocabulary, setVocabulary] = useState<VocabularyCard[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Vokabeln laden\n  const loadVocabularyData = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Versuche zuerst IndexedDB\n      const data = await loadVocabulary();\n      if (data && data.length > 0) {\n        setVocabulary(data);\n        // Backup in LocalStorage aktualisieren\n        backupToLocalStorage(data);\n        return;\n      }\n\n      // Wenn IndexedDB leer, versuche LocalStorage\n      const backupData = loadFromLocalStorage();\n      if (backupData && backupData.length > 0) {\n        setVocabulary(backupData);\n        // Wiederherstellen in IndexedDB\n        await saveVocabulary(backupData);\n        return;\n      }\n\n      // Wenn beide leer, lade aus JSON\n      console.log('📥 Versuche Vokabeln aus JSON zu laden...');\n      const response = await fetch('/ital-deutsch-vocabulary.json');\n      if (!response.ok) {\n        console.error('❌ JSON-Ladefehler:', response.status, response.statusText);\n        throw new Error('Fehler beim Laden der Vokabeln');\n      }\n      const jsonData = await response.json();\n      console.log('📦 JSON-Daten geladen:', jsonData.meta);\n      \n      if (!jsonData.cards || !Array.isArray(jsonData.cards)) {\n        console.error('❌ Ungültiges JSON-Format:', jsonData);\n        throw new Error('Ungültiges JSON-Format');\n      }\n      \n      console.log(`✅ ${jsonData.cards.length} Vokabeln aus JSON geladen`);\n      \n      // Die Karten sind bereits im richtigen Format\n      const formattedData = jsonData.cards;\n      \n      console.log('📝 Daten formatiert:', formattedData.length, 'Vokabeln');\n      setVocabulary(formattedData);\n      \n      // Speichere in IndexedDB und LocalStorage\n      console.log('💾 Speichere in IndexedDB...');\n      await saveVocabulary(formattedData);\n      console.log('💾 Backup in LocalStorage...');\n      backupToLocalStorage(formattedData);\n    } catch (err) {\n      console.error('Fehler beim Laden der Vokabeln:', err);\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Vokabeln speichern\n  const saveVocabularyData = async (data: VocabularyCard[]) => {\n    try {\n      await saveVocabulary(data);\n      backupToLocalStorage(data);\n      setVocabulary(data);\n    } catch (err) {\n      console.error('Fehler beim Speichern der Vokabeln:', err);\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\n    }\n  };\n\n  // Vokabeln neu laden\n  const reloadVocabulary = async () => {\n    try {\n      // Lösche IndexedDB und LocalStorage\n      const db = await initDB();\n      const transaction = db.transaction(['vocabulary'], 'readwrite');\n      const store = transaction.objectStore('vocabulary');\n      await store.clear();\n      localStorage.removeItem('italvoc-backup');\n      \n      // Lade neu\n      await loadVocabularyData();\n    } catch (err) {\n      console.error('Fehler beim Neuladen der Vokabeln:', err);\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\n    }\n  };\n\n  // Initial laden\n  useEffect(() => {\n    loadVocabularyData();\n  }, []);\n\n  // Speichern in IndexedDB und LocalStorage\n  const saveToStorage = useCallback(async (vocabs: VocabularyCard[]) => {\n    try {\n      await saveVocabulary(vocabs);\n      backupToLocalStorage(vocabs);\n      console.log(`💾 ${vocabs.length} Vokabeln gespeichert`);\n    } catch (err) {\n      console.error('Fehler beim Speichern:', err);\n    }\n  }, []);\n\n  // Mehrere neue Vokabeln als Batch hinzufügen\n  const addVocabularies = useCallback((newVocabs: Omit<VocabularyCard, 'id' | 'sm2'>[]) => {\n    const now = Date.now();\n    const batch = newVocabs.map((v, i) => ({\n      ...v,\n      id: `custom-${now + i}-${Math.random().toString(36).substr(2, 9)}`,\n      sm2: {\n        easeFactor: 2.5,\n        interval: 1,\n        repetitions: 0,\n        nextReview: null,\n        lastReview: null,\n        quality: null\n      }\n    }));\n    const updatedVocabs = [...vocabulary, ...batch];\n    setVocabulary(updatedVocabs);\n    saveToStorage(updatedVocabs);\n    console.log(`➕ Batch: ${batch.length} neue Vokabeln hinzugefügt.`);\n    return batch;\n  }, [vocabulary, saveToStorage]);\n\n  // Neue Vokabel hinzufügen\n  const addVocabulary = useCallback((newVocab: Omit<VocabularyCard, 'id' | 'sm2'>) => {\n    const id = `custom-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const vocabWithDefaults: VocabularyCard = {\n      ...newVocab,\n      id,\n      sm2: {\n        easeFactor: 2.5,\n        interval: 1,\n        repetitions: 0,\n        nextReview: null,\n        lastReview: null,\n        quality: null\n      }\n    };\n    \n    const updatedVocabs = [...vocabulary, vocabWithDefaults];\n    setVocabulary(updatedVocabs);\n    saveToStorage(updatedVocabs);\n    \n    console.log('➕ Neue Vokabel hinzugefügt:', vocabWithDefaults);\n    return vocabWithDefaults;\n  }, [vocabulary, saveToStorage]);\n\n  // Vokabel bearbeiten\n  const updateVocabulary = useCallback((id: string, updates: Partial<Omit<VocabularyCard, 'id'>>) => {\n    const updatedVocabs = vocabulary.map(vocab => \n      vocab.id === id \n        ? { ...vocab, ...updates }\n        : vocab\n    );\n    \n    setVocabulary(updatedVocabs);\n    saveToStorage(updatedVocabs);\n    \n    console.log('✏️ Vokabel bearbeitet:', id, updates);\n    return updatedVocabs.find(v => v.id === id);\n  }, [vocabulary, saveToStorage]);\n\n  // Vokabel löschen\n  const deleteVocabulary = useCallback((id: string) => {\n    const updatedVocabs = vocabulary.filter(vocab => vocab.id !== id);\n    setVocabulary(updatedVocabs);\n    saveToStorage(updatedVocabs);\n    \n    console.log('🗑️ Vokabel gelöscht:', id);\n    return true;\n  }, [vocabulary, saveToStorage]);\n\n  // SM-2 Daten aktualisieren\n  const updateSM2Data = useCallback((id: string, sm2Data: Partial<VocabularyCard['sm2']>) => {\n    const vocab = vocabulary.find(v => v.id === id);\n    if (!vocab) {\n      console.error('Vokabel nicht gefunden:', id);\n      return null;\n    }\n    \n    return updateVocabulary(id, { \n      sm2: { \n        ...vocab.sm2,\n        ...sm2Data \n      } \n    });\n  }, [vocabulary, updateVocabulary]);\n\n  // Vokabel nach ID finden\n  const getVocabularyById = useCallback((id: string) => {\n    return vocabulary.find(vocab => vocab.id === id);\n  }, [vocabulary]);\n\n  // Duplikat-Prüfung\n  const checkDuplicate = useCallback((it: string, de: string, excludeId?: string) => {\n    return vocabulary.some(vocab => \n      vocab.id !== excludeId && (\n        vocab.it === it || \n        vocab.de === de\n      )\n    );\n  }, [vocabulary]);\n\n  // Statistiken\n  const getStats = useCallback(() => {\n    const learned = vocabulary.filter(v => v.sm2.repetitions > 0).length;\n    const toReview = vocabulary.filter(v => {\n      if (!v.sm2.nextReview) return false;\n      return new Date(v.sm2.nextReview) <= new Date();\n    }).length;\n    \n    return {\n      total: vocabulary.length,\n      learned,\n      toReview,\n      available: vocabulary.length - learned\n    };\n  }, [vocabulary]);\n\n  return {\n    vocabulary,\n    isLoading,\n    error,\n    addVocabulary,\n    addVocabularies,\n    updateVocabulary,\n    deleteVocabulary,\n    updateSM2Data,\n    getVocabularyById,\n    checkDuplicate,\n    getStats,\n    reloadVocabulary,\n    saveVocabulary: saveVocabularyData\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}