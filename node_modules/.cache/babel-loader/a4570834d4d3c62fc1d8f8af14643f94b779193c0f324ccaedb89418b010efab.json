{"ast":null,"code":"import React,{useState}from'react';import{useVocabularyManager}from'../hooks/useVocabularyManager';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MAX_REFETCH_ATTEMPTS=3;const BATCH_SIZE=10;export const KiVocabGenerator=_ref=>{let{onClose}=_ref;const[count,setCount]=useState(5);const[status,setStatus]=useState('idle');const[error,setError]=useState(null);const[vocabularies,setVocabularies]=useState([]);const[duplicateCount,setDuplicateCount]=useState(0);const[missingCount,setMissingCount]=useState(0);const[refetchProgress,setRefetchProgress]=useState({current:0,total:0,attempts:0});const[apiPrompts,setApiPrompts]=useState([]);const{vocabulary:existingVocabulary,isLoading:vocabLoading,addVocabulary,addVocabularies}=useVocabularyManager();const[successMsg,setSuccessMsg]=useState(null);const[selectedIndices,setSelectedIndices]=useState([]);// Simulierte Statuswechsel für Testzwecke\nconst simulateStatus=newStatus=>{setStatus(newStatus);if(newStatus==='error'){setError('Dies ist eine simulierte Fehlermeldung.');}else{setError(null);}};// Hilfsfunktion: Duplikatprüfung gegen Bestand und bereits generierte Vokabeln\nconst isDuplicate=(vocab,allVocabs,existing)=>{return allVocabs.some(v=>v.japanese&&v.japanese===vocab.japanese||v.kana&&v.kana===vocab.kana)||existing.some(ev=>ev.kanji&&ev.kanji===vocab.japanese||ev.kana&&ev.kana===vocab.kana);};// Prompt-Tracking\nconst prompts=[];// Hauptfunktion: KI-Call, Duplikatprüfung, ggf. Nachfordern\nconst handleGenerate=async()=>{setStatus('fetching');setError(null);setDuplicateCount(0);setMissingCount(0);setRefetchProgress({current:0,total:0,attempts:0});setApiPrompts([]);let allVocabs=[];let totalDuplicates=0;let missing=0;try{// Initialer KI-Call\nconst initialPrompt=JSON.stringify({count});prompts.push(initialPrompt);const response=await fetch('/api/generate-vocabulary',{method:'POST',headers:{'Content-Type':'application/json'},body:initialPrompt});if(!response.ok){const errorData=await response.json();setStatus('error');throw new Error(errorData.error||'Fehler bei der Generierung');}const data=await response.json();setStatus('checking-duplicates');// Duplikatprüfung (1:1 auf Kanji und Kana)\nconst duplicates=data.vocabularies.filter(vocab=>isDuplicate(vocab,[],existingVocabulary));const uniqueVocabs=data.vocabularies.filter(vocab=>!isDuplicate(vocab,[],existingVocabulary));totalDuplicates=duplicates.length;missing=count-uniqueVocabs.length;setDuplicateCount(totalDuplicates);setMissingCount(missing);allVocabs=[...uniqueVocabs];// Nachfordern, falls nötig\nlet attempts=0;while(allVocabs.length<count&&attempts<MAX_REFETCH_ATTEMPTS){setStatus('refetching');setRefetchProgress({current:allVocabs.length,total:count,attempts:attempts+1});const toFetch=count-allVocabs.length;let batchSize=toFetch;if(toFetch>=11)batchSize=BATCH_SIZE;const refetchPrompt=JSON.stringify({count:batchSize});prompts.push(refetchPrompt);const refetchResponse=await fetch('/api/generate-vocabulary',{method:'POST',headers:{'Content-Type':'application/json'},body:refetchPrompt});if(!refetchResponse.ok){const errorData=await refetchResponse.json();setStatus('error');throw new Error(errorData.error||'Fehler bei der Nachgenerierung');}const refetchData=await refetchResponse.json();// Prüfe neue Vokabeln auf Duplikate gegen Bestand und bereits generierte\nconst newUnique=refetchData.vocabularies.filter(vocab=>!isDuplicate(vocab,allVocabs,existingVocabulary));allVocabs=[...allVocabs,...newUnique];attempts++;}setVocabularies(allVocabs.slice(0,count));setDuplicateCount(count-allVocabs.length>0?count-allVocabs.length:0);setMissingCount(count-allVocabs.length>0?count-allVocabs.length:0);setApiPrompts([...prompts]);setTimeout(()=>setStatus('done'),1000);}catch(err){setError(err instanceof Error?err.message:'Ein unbekannter Fehler ist aufgetreten');setStatus('error');console.error('Fehler:',err);}};// Nach Generierung: alle Vokabeln standardmäßig selektieren\nReact.useEffect(()=>{if(status==='done'&&vocabularies.length>0){setSelectedIndices(vocabularies.map((_,i)=>i));}},[status,vocabularies]);// Einzelne Vokabel selektieren/de-selektieren\nconst toggleSelect=idx=>{setSelectedIndices(prev=>prev.includes(idx)?prev.filter(i=>i!==idx):[...prev,idx]);};// Alle auswählen\nconst selectAll=()=>{setSelectedIndices(vocabularies.map((_,i)=>i));};// Alle abwählen\nconst deselectAll=()=>{setSelectedIndices([]);};// Übernahme-Handler (nur selektierte Vokabeln)\nconst handleAccept=()=>{try{const newVocabs=selectedIndices.map(idx=>({kanji:vocabularies[idx].japanese,kana:vocabularies[idx].kana,romaji:vocabularies[idx].romaji,de:vocabularies[idx].german,example:vocabularies[idx].example}));addVocabularies(newVocabs);setSuccessMsg(\"\".concat(newVocabs.length,\" neue Vokabel(n) \\xFCbernommen!\"));setTimeout(()=>{setSuccessMsg(null);onClose();},1800);}catch(e){setError('Fehler beim Übernehmen der Vokabeln.');}};// UI für Statusmeldungen\nconst renderStatus=()=>{switch(status){case'fetching':return/*#__PURE__*/_jsxs(\"div\",{className:\"text-amber-700 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"animate-spin inline-block w-4 h-4 border-2 border-amber-400 border-t-transparent rounded-full\"}),\"Vokabeln werden abgefragt...\"]});case'checking-duplicates':return/*#__PURE__*/_jsxs(\"div\",{className:\"text-amber-700 flex flex-col gap-1 items-start\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"animate-spin inline-block w-4 h-4 border-2 border-amber-400 border-t-transparent rounded-full\"}),\"Duplikate werden identifiziert...\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs text-stone-600\",children:[duplicateCount,\" Duplikate gefunden, \",missingCount,\" Vokabel(n) fehlen noch.\"]})]});case'refetching':return/*#__PURE__*/_jsxs(\"div\",{className:\"text-amber-700 flex flex-col gap-1 items-start\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"animate-spin inline-block w-4 h-4 border-2 border-amber-400 border-t-transparent rounded-full\"}),\"Ersatz f\\xFCr Duplikate wird abgefragt...\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs text-stone-600\",children:[refetchProgress.current,\" / \",refetchProgress.total,\" Vokabeln duplikatfrei, Versuch \",refetchProgress.attempts,\" von \",MAX_REFETCH_ATTEMPTS]})]});case'error':return/*#__PURE__*/_jsx(\"div\",{className:\"bg-rose-50 border border-rose-200 text-rose-700 px-4 py-3 rounded-md\",children:error});default:return null;}};return/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-stone-50/95 flex items-center justify-center p-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-lg shadow-lg p-6 max-w-md w-full max-h-[90vh] overflow-y-auto\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-light text-stone-700\",children:\"KI Vokabel Generator\"}),/*#__PURE__*/_jsx(\"span\",{className:\"text-xs text-stone-400 ml-2\",children:\"v0.24\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onClose,className:\"text-stone-400 hover:text-stone-600\",children:\"\\u2715\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-stone-700 mb-2\",children:\"Anzahl neuer Vokabeln\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",min:\"1\",max:\"20\",value:count,onChange:e=>setCount(parseInt(e.target.value)||1),className:\"w-full px-3 py-2 border border-stone-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-500\"})]}),renderStatus(),/*#__PURE__*/_jsx(\"button\",{onClick:handleGenerate,disabled:status==='fetching'||status==='checking-duplicates'||status==='refetching'||vocabLoading,className:\"w-full bg-amber-600 text-white py-2 px-4 rounded-md hover:bg-amber-700 disabled:opacity-50 disabled:cursor-not-allowed\",children:status==='fetching'?'Generiere...':'Vokabeln generieren'}),status==='done'&&vocabularies.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-6 space-y-4\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-medium text-stone-700\",children:\"Generierte Vokabeln\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-2 mb-2\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:selectAll,className:\"px-3 py-1 bg-amber-100 text-amber-800 rounded hover:bg-amber-200 text-xs\",children:\"Alle ausw\\xE4hlen\"}),/*#__PURE__*/_jsx(\"button\",{onClick:deselectAll,className:\"px-3 py-1 bg-stone-100 text-stone-700 rounded hover:bg-stone-200 text-xs\",children:\"Alle abw\\xE4hlen\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-3\",children:vocabularies.map((vocab,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"p-4 border border-amber-200 rounded-lg bg-amber-50 flex items-start gap-3 \".concat(selectedIndices.includes(index)?'':'opacity-50'),children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:selectedIndices.includes(index),onChange:()=>toggleSelect(index),className:\"mt-1 accent-amber-600\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-start\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-xl font-medium text-stone-800\",children:vocab.japanese}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-stone-600\",children:vocab.kana}),vocab.romaji&&/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-amber-700 italic\",children:vocab.romaji})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right\",children:/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-stone-800\",children:vocab.german})})]}),vocab.example&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-2 text-sm text-stone-600\",children:vocab.example})]})]},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-3 mt-4\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleAccept,className:\"flex-1 bg-amber-600 text-white py-2 rounded-md hover:bg-amber-700 transition\",disabled:selectedIndices.length===0||!!successMsg,children:\"\\xDCbernehmen\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onClose,className:\"flex-1 bg-stone-200 text-stone-700 py-2 rounded-md hover:bg-stone-300 transition\",disabled:!!successMsg,children:\"Abbrechen\"})]}),successMsg&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-3 bg-teal-100 border border-teal-300 text-teal-800 px-4 py-2 rounded-md text-center\",children:successMsg})]}),status==='done'&&apiPrompts.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-6\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-xs font-semibold text-stone-500 mb-1\",children:\"Verwendete API-Prompts:\"}),/*#__PURE__*/_jsx(\"pre\",{className:\"bg-stone-100 text-xs p-2 rounded max-h-40 overflow-y-auto whitespace-pre-wrap\",children:apiPrompts.map((p,i)=>\"#\".concat(i+1,\": \").concat(p)).join('\\n')})]})]})]})});};","map":{"version":3,"names":["React","useState","useVocabularyManager","jsx","_jsx","jsxs","_jsxs","MAX_REFETCH_ATTEMPTS","BATCH_SIZE","KiVocabGenerator","_ref","onClose","count","setCount","status","setStatus","error","setError","vocabularies","setVocabularies","duplicateCount","setDuplicateCount","missingCount","setMissingCount","refetchProgress","setRefetchProgress","current","total","attempts","apiPrompts","setApiPrompts","vocabulary","existingVocabulary","isLoading","vocabLoading","addVocabulary","addVocabularies","successMsg","setSuccessMsg","selectedIndices","setSelectedIndices","simulateStatus","newStatus","isDuplicate","vocab","allVocabs","existing","some","v","japanese","kana","ev","kanji","prompts","handleGenerate","totalDuplicates","missing","initialPrompt","JSON","stringify","push","response","fetch","method","headers","body","ok","errorData","json","Error","data","duplicates","filter","uniqueVocabs","length","toFetch","batchSize","refetchPrompt","refetchResponse","refetchData","newUnique","slice","setTimeout","err","message","console","useEffect","map","_","i","toggleSelect","idx","prev","includes","selectAll","deselectAll","handleAccept","newVocabs","romaji","de","german","example","concat","e","renderStatus","className","children","onClick","type","min","max","value","onChange","parseInt","target","disabled","index","checked","p","join"],"sources":["/home/alex/italvoc/src/components/KiVocabGenerator.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useVocabularyManager } from '../hooks/useVocabularyManager';\n\ninterface Vocabulary {\n  japanese: string;\n  kana: string;\n  romaji: string;\n  german: string;\n  example?: string;\n}\n\ninterface KiVocabGeneratorProps {\n  onClose: () => void;\n}\n\ntype Status =\n  | 'idle'\n  | 'fetching'\n  | 'checking-duplicates'\n  | 'refetching'\n  | 'done'\n  | 'error';\n\nconst MAX_REFETCH_ATTEMPTS = 3;\nconst BATCH_SIZE = 10;\n\nexport const KiVocabGenerator: React.FC<KiVocabGeneratorProps> = ({ onClose }) => {\n  const [count, setCount] = useState<number>(5);\n  const [status, setStatus] = useState<Status>('idle');\n  const [error, setError] = useState<string | null>(null);\n  const [vocabularies, setVocabularies] = useState<Vocabulary[]>([]);\n  const [duplicateCount, setDuplicateCount] = useState<number>(0);\n  const [missingCount, setMissingCount] = useState<number>(0);\n  const [refetchProgress, setRefetchProgress] = useState<{current: number, total: number, attempts: number}>({current: 0, total: 0, attempts: 0});\n  const [apiPrompts, setApiPrompts] = useState<string[]>([]);\n  const { vocabulary: existingVocabulary, isLoading: vocabLoading, addVocabulary, addVocabularies } = useVocabularyManager();\n  const [successMsg, setSuccessMsg] = useState<string | null>(null);\n  const [selectedIndices, setSelectedIndices] = useState<number[]>([]);\n\n  // Simulierte Statuswechsel für Testzwecke\n  const simulateStatus = (newStatus: Status) => {\n    setStatus(newStatus);\n    if (newStatus === 'error') {\n      setError('Dies ist eine simulierte Fehlermeldung.');\n    } else {\n      setError(null);\n    }\n  };\n\n  // Hilfsfunktion: Duplikatprüfung gegen Bestand und bereits generierte Vokabeln\n  const isDuplicate = (vocab: Vocabulary, allVocabs: Vocabulary[], existing: typeof existingVocabulary) => {\n    return (\n      allVocabs.some(v =>\n        (v.japanese && v.japanese === vocab.japanese) ||\n        (v.kana && v.kana === vocab.kana)\n      ) ||\n      existing.some(ev =>\n        (ev.kanji && ev.kanji === vocab.japanese) ||\n        (ev.kana && ev.kana === vocab.kana)\n      )\n    );\n  };\n\n  // Prompt-Tracking\n  const prompts: string[] = [];\n\n  // Hauptfunktion: KI-Call, Duplikatprüfung, ggf. Nachfordern\n  const handleGenerate = async () => {\n    setStatus('fetching');\n    setError(null);\n    setDuplicateCount(0);\n    setMissingCount(0);\n    setRefetchProgress({current: 0, total: 0, attempts: 0});\n    setApiPrompts([]);\n    let allVocabs: Vocabulary[] = [];\n    let totalDuplicates = 0;\n    let missing = 0;\n    try {\n      // Initialer KI-Call\n      const initialPrompt = JSON.stringify({ count });\n      prompts.push(initialPrompt);\n      const response = await fetch('/api/generate-vocabulary', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: initialPrompt\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        setStatus('error');\n        throw new Error(errorData.error || 'Fehler bei der Generierung');\n      }\n\n      const data = await response.json();\n      setStatus('checking-duplicates');\n      // Duplikatprüfung (1:1 auf Kanji und Kana)\n      const duplicates = data.vocabularies.filter((vocab: Vocabulary) =>\n        isDuplicate(vocab, [], existingVocabulary)\n      );\n      const uniqueVocabs = data.vocabularies.filter((vocab: Vocabulary) =>\n        !isDuplicate(vocab, [], existingVocabulary)\n      );\n      totalDuplicates = duplicates.length;\n      missing = count - uniqueVocabs.length;\n      setDuplicateCount(totalDuplicates);\n      setMissingCount(missing);\n      allVocabs = [...uniqueVocabs];\n\n      // Nachfordern, falls nötig\n      let attempts = 0;\n      while (allVocabs.length < count && attempts < MAX_REFETCH_ATTEMPTS) {\n        setStatus('refetching');\n        setRefetchProgress({current: allVocabs.length, total: count, attempts: attempts+1});\n        const toFetch = count - allVocabs.length;\n        let batchSize = toFetch;\n        if (toFetch >= 11) batchSize = BATCH_SIZE;\n        const refetchPrompt = JSON.stringify({ count: batchSize });\n        prompts.push(refetchPrompt);\n        const refetchResponse = await fetch('/api/generate-vocabulary', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: refetchPrompt\n        });\n        if (!refetchResponse.ok) {\n          const errorData = await refetchResponse.json();\n          setStatus('error');\n          throw new Error(errorData.error || 'Fehler bei der Nachgenerierung');\n        }\n        const refetchData = await refetchResponse.json();\n        // Prüfe neue Vokabeln auf Duplikate gegen Bestand und bereits generierte\n        const newUnique = refetchData.vocabularies.filter((vocab: Vocabulary) =>\n          !isDuplicate(vocab, allVocabs, existingVocabulary)\n        );\n        allVocabs = [...allVocabs, ...newUnique];\n        attempts++;\n      }\n      setVocabularies(allVocabs.slice(0, count));\n      setDuplicateCount(count - allVocabs.length > 0 ? count - allVocabs.length : 0);\n      setMissingCount(count - allVocabs.length > 0 ? count - allVocabs.length : 0);\n      setApiPrompts([...prompts]);\n      setTimeout(() => setStatus('done'), 1000);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Ein unbekannter Fehler ist aufgetreten');\n      setStatus('error');\n      console.error('Fehler:', err);\n    }\n  };\n\n  // Nach Generierung: alle Vokabeln standardmäßig selektieren\n  React.useEffect(() => {\n    if (status === 'done' && vocabularies.length > 0) {\n      setSelectedIndices(vocabularies.map((_, i) => i));\n    }\n  }, [status, vocabularies]);\n\n  // Einzelne Vokabel selektieren/de-selektieren\n  const toggleSelect = (idx: number) => {\n    setSelectedIndices((prev) =>\n      prev.includes(idx) ? prev.filter(i => i !== idx) : [...prev, idx]\n    );\n  };\n\n  // Alle auswählen\n  const selectAll = () => {\n    setSelectedIndices(vocabularies.map((_, i) => i));\n  };\n  // Alle abwählen\n  const deselectAll = () => {\n    setSelectedIndices([]);\n  };\n\n  // Übernahme-Handler (nur selektierte Vokabeln)\n  const handleAccept = () => {\n    try {\n      const newVocabs = selectedIndices.map(idx => ({\n        kanji: vocabularies[idx].japanese,\n        kana: vocabularies[idx].kana,\n        romaji: vocabularies[idx].romaji,\n        de: vocabularies[idx].german,\n        example: vocabularies[idx].example\n      }));\n      addVocabularies(newVocabs);\n      setSuccessMsg(`${newVocabs.length} neue Vokabel(n) übernommen!`);\n      setTimeout(() => {\n        setSuccessMsg(null);\n        onClose();\n      }, 1800);\n    } catch (e) {\n      setError('Fehler beim Übernehmen der Vokabeln.');\n    }\n  };\n\n  // UI für Statusmeldungen\n  const renderStatus = () => {\n    switch (status) {\n      case 'fetching':\n        return <div className=\"text-amber-700 flex items-center gap-2\"><span className=\"animate-spin inline-block w-4 h-4 border-2 border-amber-400 border-t-transparent rounded-full\"></span>Vokabeln werden abgefragt...</div>;\n      case 'checking-duplicates':\n        return (\n          <div className=\"text-amber-700 flex flex-col gap-1 items-start\">\n            <div className=\"flex items-center gap-2\"><span className=\"animate-spin inline-block w-4 h-4 border-2 border-amber-400 border-t-transparent rounded-full\"></span>Duplikate werden identifiziert...</div>\n            <div className=\"text-xs text-stone-600\">{duplicateCount} Duplikate gefunden, {missingCount} Vokabel(n) fehlen noch.</div>\n          </div>\n        );\n      case 'refetching':\n        return (\n          <div className=\"text-amber-700 flex flex-col gap-1 items-start\">\n            <div className=\"flex items-center gap-2\"><span className=\"animate-spin inline-block w-4 h-4 border-2 border-amber-400 border-t-transparent rounded-full\"></span>Ersatz für Duplikate wird abgefragt...</div>\n            <div className=\"text-xs text-stone-600\">{refetchProgress.current} / {refetchProgress.total} Vokabeln duplikatfrei, Versuch {refetchProgress.attempts} von {MAX_REFETCH_ATTEMPTS}</div>\n          </div>\n        );\n      case 'error':\n        return <div className=\"bg-rose-50 border border-rose-200 text-rose-700 px-4 py-3 rounded-md\">{error}</div>;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-stone-50/95 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-lg shadow-lg p-6 max-w-md w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-light text-stone-700\">KI Vokabel Generator</h2>\n          <span className=\"text-xs text-stone-400 ml-2\">v0.24</span>\n          <button\n            onClick={onClose}\n            className=\"text-stone-400 hover:text-stone-600\"\n          >\n            ✕\n          </button>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-stone-700 mb-2\">\n              Anzahl neuer Vokabeln\n            </label>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"20\"\n              value={count}\n              onChange={(e) => setCount(parseInt(e.target.value) || 1)}\n              className=\"w-full px-3 py-2 border border-stone-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-500\"\n            />\n          </div>\n\n          {/* Status-Feedback */}\n          {renderStatus()}\n\n          <button\n            onClick={handleGenerate}\n            disabled={status === 'fetching' || status === 'checking-duplicates' || status === 'refetching' || vocabLoading}\n            className=\"w-full bg-amber-600 text-white py-2 px-4 rounded-md hover:bg-amber-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {status === 'fetching' ? 'Generiere...' : 'Vokabeln generieren'}\n          </button>\n\n          {status === 'done' && vocabularies.length > 0 && (\n            <div className=\"mt-6 space-y-4\">\n              <h3 className=\"text-lg font-medium text-stone-700\">Generierte Vokabeln</h3>\n              {/* Select/Deselect All Buttons */}\n              <div className=\"flex gap-2 mb-2\">\n                <button onClick={selectAll} className=\"px-3 py-1 bg-amber-100 text-amber-800 rounded hover:bg-amber-200 text-xs\">Alle auswählen</button>\n                <button onClick={deselectAll} className=\"px-3 py-1 bg-stone-100 text-stone-700 rounded hover:bg-stone-200 text-xs\">Alle abwählen</button>\n              </div>\n              <div className=\"space-y-3\">\n                {vocabularies.map((vocab, index) => (\n                  <div\n                    key={index}\n                    className={`p-4 border border-amber-200 rounded-lg bg-amber-50 flex items-start gap-3 ${selectedIndices.includes(index) ? '' : 'opacity-50'}`}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedIndices.includes(index)}\n                      onChange={() => toggleSelect(index)}\n                      className=\"mt-1 accent-amber-600\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <div className=\"text-xl font-medium text-stone-800\">\n                            {vocab.japanese}\n                          </div>\n                          <div className=\"text-sm text-stone-600\">\n                            {vocab.kana}\n                          </div>\n                          {vocab.romaji && (\n                            <div className=\"text-sm text-amber-700 italic\">\n                              {vocab.romaji}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-medium text-stone-800\">\n                            {vocab.german}\n                          </div>\n                        </div>\n                      </div>\n                      {vocab.example && (\n                        <div className=\"mt-2 text-sm text-stone-600\">\n                          {vocab.example}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {/* Übernehmen/Abbrechen-Buttons */}\n              <div className=\"flex gap-3 mt-4\">\n                <button\n                  onClick={handleAccept}\n                  className=\"flex-1 bg-amber-600 text-white py-2 rounded-md hover:bg-amber-700 transition\"\n                  disabled={selectedIndices.length === 0 || !!successMsg}\n                >\n                  Übernehmen\n                </button>\n                <button\n                  onClick={onClose}\n                  className=\"flex-1 bg-stone-200 text-stone-700 py-2 rounded-md hover:bg-stone-300 transition\"\n                  disabled={!!successMsg}\n                >\n                  Abbrechen\n                </button>\n              </div>\n              {successMsg && (\n                <div className=\"mt-3 bg-teal-100 border border-teal-300 text-teal-800 px-4 py-2 rounded-md text-center\">\n                  {successMsg}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Prompts anzeigen */}\n          {status === 'done' && apiPrompts.length > 0 && (\n            <div className=\"mt-6\">\n              <h4 className=\"text-xs font-semibold text-stone-500 mb-1\">Verwendete API-Prompts:</h4>\n              <pre className=\"bg-stone-100 text-xs p-2 rounded max-h-40 overflow-y-auto whitespace-pre-wrap\">{apiPrompts.map((p, i) => `#${i+1}: ${p}`).join('\\n')}</pre>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}