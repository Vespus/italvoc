{"ast":null,"code":"const DB_NAME='japanvoc-db';const STORE_NAME='vocabulary';const DB_VERSION=1;// IndexedDB initialisieren\nexport const initDB=()=>{return new Promise((resolve,reject)=>{const request=indexedDB.open(DB_NAME,DB_VERSION);request.onerror=()=>{console.error('IndexedDB Fehler:',request.error);reject(request.error);};request.onsuccess=()=>{resolve(request.result);};request.onupgradeneeded=event=>{const db=event.target.result;if(!db.objectStoreNames.contains(STORE_NAME)){db.createObjectStore(STORE_NAME,{keyPath:'id'});}};});};// Vokabeln in IndexedDB speichern\nexport const saveVocabulary=async vocabulary=>{try{const db=await initDB();const transaction=db.transaction([STORE_NAME],'readwrite');const store=transaction.objectStore(STORE_NAME);// Bestehende Daten löschen\nawait new Promise((resolve,reject)=>{const clearRequest=store.clear();clearRequest.onsuccess=()=>resolve();clearRequest.onerror=()=>reject(clearRequest.error);});// Neue Daten speichern\nfor(const card of vocabulary){await new Promise((resolve,reject)=>{const request=store.add(card);request.onsuccess=()=>resolve();request.onerror=()=>reject(request.error);});}}catch(err){console.error('Fehler beim Speichern in IndexedDB:',err);throw err;}};// Vokabeln aus IndexedDB laden\nexport const loadVocabulary=async()=>{try{const db=await initDB();const transaction=db.transaction([STORE_NAME],'readonly');const store=transaction.objectStore(STORE_NAME);return new Promise((resolve,reject)=>{const request=store.getAll();request.onsuccess=()=>resolve(request.result);request.onerror=()=>reject(request.error);});}catch(err){console.error('Fehler beim Laden aus IndexedDB:',err);throw err;}};// Backup in LocalStorage\nexport const backupToLocalStorage=vocabulary=>{try{localStorage.setItem('japanvoc-backup',JSON.stringify(vocabulary));}catch(err){console.error('Fehler beim Backup in LocalStorage:',err);throw err;}};// Backup aus LocalStorage laden\nexport const loadFromLocalStorage=()=>{try{const backup=localStorage.getItem('japanvoc-backup');return backup?JSON.parse(backup):null;}catch(err){console.error('Fehler beim Laden aus LocalStorage:',err);return null;}};","map":{"version":3,"names":["DB_NAME","STORE_NAME","DB_VERSION","initDB","Promise","resolve","reject","request","indexedDB","open","onerror","console","error","onsuccess","result","onupgradeneeded","event","db","target","objectStoreNames","contains","createObjectStore","keyPath","saveVocabulary","vocabulary","transaction","store","objectStore","clearRequest","clear","card","add","err","loadVocabulary","getAll","backupToLocalStorage","localStorage","setItem","JSON","stringify","loadFromLocalStorage","backup","getItem","parse"],"sources":["/home/alex/italvoc/src/utils/storage.ts"],"sourcesContent":["import { VocabularyCard } from '../types/vocabulary';\n\nconst DB_NAME = 'japanvoc-db';\nconst STORE_NAME = 'vocabulary';\nconst DB_VERSION = 1;\n\n// IndexedDB initialisieren\nexport const initDB = (): Promise<IDBDatabase> => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n    request.onerror = () => {\n      console.error('IndexedDB Fehler:', request.error);\n      reject(request.error);\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n\n    request.onupgradeneeded = (event) => {\n      const db = (event.target as IDBOpenDBRequest).result;\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\n        db.createObjectStore(STORE_NAME, { keyPath: 'id' });\n      }\n    };\n  });\n};\n\n// Vokabeln in IndexedDB speichern\nexport const saveVocabulary = async (vocabulary: VocabularyCard[]): Promise<void> => {\n  try {\n    const db = await initDB();\n    const transaction = db.transaction([STORE_NAME], 'readwrite');\n    const store = transaction.objectStore(STORE_NAME);\n\n    // Bestehende Daten löschen\n    await new Promise<void>((resolve, reject) => {\n      const clearRequest = store.clear();\n      clearRequest.onsuccess = () => resolve();\n      clearRequest.onerror = () => reject(clearRequest.error);\n    });\n\n    // Neue Daten speichern\n    for (const card of vocabulary) {\n      await new Promise<void>((resolve, reject) => {\n        const request = store.add(card);\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(request.error);\n      });\n    }\n  } catch (err) {\n    console.error('Fehler beim Speichern in IndexedDB:', err);\n    throw err;\n  }\n};\n\n// Vokabeln aus IndexedDB laden\nexport const loadVocabulary = async (): Promise<VocabularyCard[]> => {\n  try {\n    const db = await initDB();\n    const transaction = db.transaction([STORE_NAME], 'readonly');\n    const store = transaction.objectStore(STORE_NAME);\n    \n    return new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  } catch (err) {\n    console.error('Fehler beim Laden aus IndexedDB:', err);\n    throw err;\n  }\n};\n\n// Backup in LocalStorage\nexport const backupToLocalStorage = (vocabulary: VocabularyCard[]): void => {\n  try {\n    localStorage.setItem('japanvoc-backup', JSON.stringify(vocabulary));\n  } catch (err) {\n    console.error('Fehler beim Backup in LocalStorage:', err);\n    throw err;\n  }\n};\n\n// Backup aus LocalStorage laden\nexport const loadFromLocalStorage = (): VocabularyCard[] | null => {\n  try {\n    const backup = localStorage.getItem('japanvoc-backup');\n    return backup ? JSON.parse(backup) : null;\n  } catch (err) {\n    console.error('Fehler beim Laden aus LocalStorage:', err);\n    return null;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}